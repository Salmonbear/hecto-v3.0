{"version":3,"file":"component---src-pages-new-page-jsx-a59e9c92347f74ddf15d.js","mappings":"0KAMaA,E,QAAsCC,cACjD,kC,yNCeWC,EAA+B,IAAIC,MAEnCC,EAA2B,IAAID,MAEpB,EACtBE,WAAWC,0BAEU,EACrBD,WAAWE,yBAKN,SAASC,IACd,OAAO,gDA0CT,IAAMC,EAAqB,CACzBC,KAAM,CAAC,SAgCF,IA7BoBC,EACnBC,EA4BKC,EAAiBC,OAAOC,SA5B7BH,EAAO,SAAUI,GACrB,MAAsCf,EAAAA,SACpC,kBACEgB,EAAAA,EAAAA,kBAAiBD,EAAO,CACtBE,KAAMP,EACNQ,iBAAgB,OAAKV,EAAmBE,IACxCS,qBAAsBhB,EACtBiB,yBAA0BnB,MAG9B,CAACc,EAAOL,IAGV,OAzDJ,SAAoCK,GAAQ,IAAD,IACjCM,EAAiCN,EAAjCM,SAAUC,EAAuBP,EAAvBO,UAAWC,EAAYR,EAAZQ,QAEvBC,GADO,UAAAC,EAAAA,kBAAA,cAAAA,GACAzB,EAAAA,SAAc,kBAAMa,OAAOC,OAAO,GAAIC,EAAMS,QAAO,CAACT,EAAMS,QAOvE,GANY,iBACPA,EACAH,GAGe,UAAAK,EAAAA,sBAAA,cAAAA,GACiB1B,EAAAA,SAAe,KACpD,OADA,WAEE,+BAAC,WAAD,MACE,0GAMA,sCAAK2B,UAAWC,EAAAA,KACd,sCACE,oBAAmB,OACnB,wBAAuBN,EAAUb,KACjC,qBAAmB,EACnB,wBAAuBc,EACvBI,WAAWE,EAAAA,EAAAA,YACTD,EAAAA,GACAA,EAAAA,GACAA,EAAAA,EACAA,EAAAA,eACAA,EAAAA,GCpEM,0CD+FPE,CAA2B,CAChCT,SAbF,EAAQA,SAcNG,KAdF,EAAkBA,KAehBF,UAfF,EAAwBA,UAgBtBC,QAASb,MAINqB,YADU,UArBQrB,EA+BP,QATG,iBAEnB,kBAAqCA,EAEhCC,GAMP,CAGEqB,qBAAsB/B,EACtBgC,iBAAkB9B,EAElB+B,aAAc,CACZC,MAAO,GACPC,YAAa,GACbC,WAAY,GACZC,UAAW,MEhFjB,MA/BA,YAAwC,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAiB3B,OACE,gBAAC,cAAD,CAA8CC,WAAOC,GACnD,gBAAC,IAAD,KACE,gBAAC,qBAAD,CACEF,OAAQA,EACRG,MAAO9B,OAAO+B,YAAY,IAAIC,gBAAgBN,EAASO,UAEvD,gBAAClC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/plasmic/hecto/PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants.jsx","webpack://gatsby-starter-default/./src/components/plasmic/hecto/PlasmicNewPage.jsx","webpack://gatsby-starter-default/./src/components/plasmic/hecto/PlasmicNewPage.module.css","webpack://gatsby-starter-default/./src/pages/new-page.jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport * as React from \"react\"\n\nexport const UnnamedGlobalGroupOfVariantsContext = React.createContext(\n  \"PLEASE_RENDER_INSIDE_PROVIDER\"\n)\n\nexport function useUnnamedGlobalGroupOfVariants() {\n  return React.useContext(UnnamedGlobalGroupOfVariantsContext)\n}\n\nexport default UnnamedGlobalGroupOfVariantsContext\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd\n// Component: Txmbv7ZMqD\nimport * as React from \"react\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as ph from \"@plasmicapp/host\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_hecto.module.css\" // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss\nimport * as sty from \"./PlasmicNewPage.module.css\" // plasmic-import: Txmbv7ZMqD/css\n\nexport const PlasmicNewPage__VariantProps = new Array()\n\nexport const PlasmicNewPage__ArgProps = new Array()\n\nconst __wrapUserFunction =\n  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn())\n\nconst __wrapUserPromise =\n  globalThis.__PlasmicWrapUserPromise ??\n  (async (loc, promise) => {\n    await promise\n  })\n\nexport function Head() {\n  return <></>\n}\n\nfunction PlasmicNewPage__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])\n  const $props = {\n    ...args,\n    ...variants,\n  }\n\n  const currentUser = p.useCurrentUser?.() || {}\n  const [$queries, setDollarQueries] = React.useState({})\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        <div\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          className={classNames(\n            projectcss.all,\n            projectcss.root_reset,\n            projectcss.plasmic_default_styles,\n            projectcss.plasmic_mixins,\n            projectcss.plasmic_tokens,\n            sty.root\n          )}\n        />\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicNewPage__ArgProps,\n          internalVariantPropNames: PlasmicNewPage__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicNewPage__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicNewPage\"\n  } else {\n    func.displayName = `PlasmicNewPage.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicNewPage = Object.assign(\n  // Top-level PlasmicNewPage renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    // Metadata about props expected for PlasmicNewPage\n    internalVariantProps: PlasmicNewPage__VariantProps,\n    internalArgProps: PlasmicNewPage__ArgProps,\n    // Page metadata\n    pageMetadata: {\n      title: \"\",\n      description: \"\",\n      ogImageSrc: \"\",\n      canonical: \"\",\n    },\n  }\n)\n\nexport default PlasmicNewPage\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var root = \"PlasmicNewPage-module--root--z9ZLa\";","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport * as ph from \"@plasmicapp/host\"\nimport GlobalContextsProvider from \"../components/plasmic/hecto/PlasmicGlobalContextsProvider\"\nimport { UnnamedGlobalGroupOfVariantsContext } from \"../components/plasmic/hecto/PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants\"\nimport {\n  PlasmicNewPage,\n  Head,\n} from \"../components/plasmic/hecto/PlasmicNewPage\"\n\nexport { Head }\n\nfunction NewPage({ location, params }) {\n  // Use PlasmicNewPage to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicNewPage are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicNewPage is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return (\n    <UnnamedGlobalGroupOfVariantsContext.Provider value={undefined}>\n      <GlobalContextsProvider>\n        <ph.PageParamsProvider\n          params={params}\n          query={Object.fromEntries(new URLSearchParams(location.search))}\n        >\n          <PlasmicNewPage />\n        </ph.PageParamsProvider>\n      </GlobalContextsProvider>\n    </UnnamedGlobalGroupOfVariantsContext.Provider>\n  )\n}\n\nexport default NewPage\n"],"names":["UnnamedGlobalGroupOfVariantsContext","React","PlasmicNewPage__VariantProps","Array","PlasmicNewPage__ArgProps","globalThis","__PlasmicWrapUserFunction","__PlasmicWrapUserPromise","Head","PlasmicDescendants","root","nodeName","func","PlasmicNewPage","Object","assign","props","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","overrides","forNode","args","ph","p","className","projectcss","classNames","PlasmicNewPage__RenderFunc","displayName","internalVariantProps","internalArgProps","pageMetadata","title","description","ogImageSrc","canonical","location","params","value","undefined","query","fromEntries","URLSearchParams","search"],"sourceRoot":""}