// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd
// Component: mqmd6Ir3zvv
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import * as ph from "@plasmicapp/host"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import Header from "../../Header" // plasmic-import: qDyfn4Gje2P/component
import Button from "../../Button" // plasmic-import: 16yj8MRmRBT/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as projectcss from "./plasmic_hecto.module.css" // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss
import * as sty from "./PlasmicNewsletter2.module.css" // plasmic-import: mqmd6Ir3zvv/css
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg" // plasmic-import: g1j_XxrLjbNK/icon

export const PlasmicNewsletter2__VariantProps = new Array()

export const PlasmicNewsletter2__ArgProps = new Array()

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn())

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise
  })

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary" />
      <title key="title">{PlasmicNewsletter2.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicNewsletter2.pageMetadata.title}
      />

      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicNewsletter2.pageMetadata.title}
      />
    </>
  )
}

function PlasmicNewsletter2__RenderFunc(props) {
  const { variants, overrides, forNode } = props
  const $ctx = ph.useDataEnv?.() || {}
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])
  const $props = {
    ...args,
    ...variants,
  }

  const currentUser = p.useCurrentUser?.() || {}
  const [$queries, setDollarQueries] = React.useState({})
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <div className={classNames(projectcss.all, sty.freeBox___2UYv)}>
              <div className={classNames(projectcss.all, sty.freeBox__jywC5)}>
                <Header
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  className={classNames("__wab_instance", sty.header)}
                />
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__p04Sl)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Search"}
                      </span>
                    </React.Fragment>
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dLi5
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Find the perfect newsletter for your brand"}
                      </span>
                    </React.Fragment>
                  </div>

                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"blue"}
                    endIcon={
                      <ArrowRightsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    shape={"rounded"}
                    showEndIcon={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bVbo8
                      )}
                    >
                      {"Search Newsletters"}
                    </div>
                  </Button>
                </div>
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__huZot)}>
              <div
                data-plasmic-name={"footerBottom"}
                data-plasmic-override={overrides.footerBottom}
                className={classNames(projectcss.all, sty.footerBottom)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___0Ohjs)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tjX7Y
                    )}
                  >
                    {"Â© Hecto . All rights reserved"}
                  </div>

                  <p.PlasmicLink
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link
                    )}
                    component={Link}
                    platform={"gatsby"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gTcfl
                      )}
                    >
                      {"Privacy"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Fu5O
                      )}
                    >
                      {"Terms and Conditions"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jyUa
                      )}
                    >
                      {"Contact Us"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cyF7Y
                      )}
                    >
                      {"Blog"}
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__faUia)}
                    />
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "columns",
    "column",
    "h2",
    "button",
    "svg",
    "footerBottom",
    "link",
  ],

  header: ["header"],
  columns: ["columns", "column", "h2", "button", "svg"],
  column: ["column", "h2", "button", "svg"],
  h2: ["h2"],
  button: ["button", "svg"],
  svg: ["svg"],
  footerBottom: ["footerBottom", "link"],
  link: ["link"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewsletter2__ArgProps,
          internalVariantPropNames: PlasmicNewsletter2__VariantProps,
        }),

      [props, nodeName]
    )

    return PlasmicNewsletter2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicNewsletter2"
  } else {
    func.displayName = `PlasmicNewsletter2.${nodeName}`
  }
  return func
}

export const PlasmicNewsletter2 = Object.assign(
  // Top-level PlasmicNewsletter2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    h2: makeNodeComponent("h2"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    footerBottom: makeNodeComponent("footerBottom"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicNewsletter2
    internalVariantProps: PlasmicNewsletter2__VariantProps,
    internalArgProps: PlasmicNewsletter2__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "search",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
)

export default PlasmicNewsletter2
/* prettier-ignore-end */
