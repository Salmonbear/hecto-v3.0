{"version":3,"file":"component---src-pages-resources-[slug]-jsx-5bad922854fe4b36bf37.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/plasmic/hecto/icons/PlasmicIcon__ArrowRightsvg.jsx","webpack://gatsby-starter-default/./src/components/plasmic/hecto/PlasmicArticle.jsx","webpack://gatsby-starter-default/./src/components/plasmic/hecto/PlasmicArticle.module.css","webpack://gatsby-starter-default/./src/pages/resources/[slug].jsx"],"sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport function ArrowRightsvgIcon(props) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      className={classNames(\"plasmic-default__svg\", className, \"icon\")}\n      viewBox={\"0 0 24 24\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n        ...(style || {}),\n      }}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path\n        d={\n          \"M18.055 10.522V6.016L24.039 12l-5.984 5.984v-4.506H-.039v-2.957h18.094z\"\n        }\n      ></path>\n    </svg>\n  )\n}\n\nexport default ArrowRightsvgIcon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: jLAmXkGdPPYDvKpL9j3cJd\n// Component: VBD1lfaH6xV\nimport * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as p from \"@plasmicapp/react-web\"\nimport * as ph from \"@plasmicapp/host\"\nimport {\n  classNames,\n  createPlasmicElementProxy,\n  deriveRenderOpts,\n} from \"@plasmicapp/react-web\"\nimport Button from \"../../Button\" // plasmic-import: 16yj8MRmRBT/component\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as projectcss from \"./plasmic_hecto.module.css\" // plasmic-import: jLAmXkGdPPYDvKpL9j3cJd/projectcss\nimport * as sty from \"./PlasmicArticle.module.css\" // plasmic-import: VBD1lfaH6xV/css\nimport ArrowRightsvgIcon from \"./icons/PlasmicIcon__ArrowRightsvg\" // plasmic-import: g1j_XxrLjbNK/icon\n\nexport const PlasmicArticle__VariantProps = new Array()\n\nexport const PlasmicArticle__ArgProps = new Array()\n\nconst __wrapUserFunction =\n  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn())\n\nconst __wrapUserPromise =\n  globalThis.__PlasmicWrapUserPromise ??\n  (async (loc, promise) => {\n    await promise\n  })\n\nexport function Head() {\n  return (\n    <>\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <title key=\"title\">{PlasmicArticle.pageMetadata.title}</title>\n      <meta\n        key=\"og:title\"\n        property=\"og:title\"\n        content={PlasmicArticle.pageMetadata.title}\n      />\n\n      <meta\n        key=\"twitter:title\"\n        name=\"twitter:title\"\n        content={PlasmicArticle.pageMetadata.title}\n      />\n    </>\n  )\n}\n\nfunction PlasmicArticle__RenderFunc(props) {\n  const { variants, overrides, forNode } = props\n  const $ctx = ph.useDataEnv?.() || {}\n  const args = React.useMemo(() => Object.assign({}, props.args), [props.args])\n  const $props = {\n    ...args,\n    ...variants,\n  }\n\n  const currentUser = p.useCurrentUser?.() || {}\n  const [$queries, setDollarQueries] = React.useState({})\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={projectcss.plasmic_page_wrapper}>\n        {true ? (\n          <p.Stack\n            as={\"div\"}\n            data-plasmic-name={\"root\"}\n            data-plasmic-override={overrides.root}\n            data-plasmic-root={true}\n            data-plasmic-for-node={forNode}\n            hasGap={true}\n            className={classNames(\n              projectcss.all,\n              projectcss.root_reset,\n              projectcss.plasmic_default_styles,\n              projectcss.plasmic_mixins,\n              projectcss.plasmic_tokens,\n              sty.root\n            )}\n          >\n            <div className={classNames(projectcss.all, sty.freeBox__hx6Db)}>\n              <div className={classNames(projectcss.all, sty.freeBox__vBjlN)} />\n            </div>\n\n            <div className={classNames(projectcss.all, sty.freeBox___20TbT)}>\n              <div\n                data-plasmic-name={\"columns\"}\n                data-plasmic-override={overrides.columns}\n                className={classNames(projectcss.all, sty.columns)}\n              >\n                <div\n                  data-plasmic-name={\"column\"}\n                  data-plasmic-override={overrides.column}\n                  className={classNames(projectcss.all, sty.column)}\n                >\n                  <h2\n                    data-plasmic-name={\"h2\"}\n                    data-plasmic-override={overrides.h2}\n                    className={classNames(\n                      projectcss.all,\n                      projectcss.h2,\n                      projectcss.__wab_text,\n                      sty.h2\n                    )}\n                  >\n                    <React.Fragment>\n                      <span\n                        className={\"plasmic_default__all plasmic_default__span\"}\n                        style={{ color: \"#000000\" }}\n                      >\n                        {\"Ready to start your campaign?\"}\n                      </span>\n                    </React.Fragment>\n                  </h2>\n\n                  <div\n                    className={classNames(\n                      projectcss.all,\n                      projectcss.__wab_text,\n                      sty.text___7Fvv\n                    )}\n                  >\n                    <React.Fragment>\n                      <span\n                        className={\"plasmic_default__all plasmic_default__span\"}\n                        style={{ color: \"#000000\" }}\n                      >\n                        {\"Find the perfect newsletter for your brand\"}\n                      </span>\n                    </React.Fragment>\n                  </div>\n\n                  <Button\n                    data-plasmic-name={\"button\"}\n                    data-plasmic-override={overrides.button}\n                    className={classNames(\"__wab_instance\", sty.button)}\n                    color={\"blue\"}\n                    endIcon={\n                      <ArrowRightsvgIcon\n                        data-plasmic-name={\"svg\"}\n                        data-plasmic-override={overrides.svg}\n                        className={classNames(projectcss.all, sty.svg)}\n                        role={\"img\"}\n                      />\n                    }\n                    showEndIcon={true}\n                  >\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__mIivc\n                      )}\n                    >\n                      {\"Search Newsletters\"}\n                    </div>\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className={classNames(projectcss.all, sty.freeBox__ylbjs)}>\n              <div\n                data-plasmic-name={\"footerBottom\"}\n                data-plasmic-override={overrides.footerBottom}\n                className={classNames(projectcss.all, sty.footerBottom)}\n              >\n                <div\n                  className={classNames(projectcss.all, sty.freeBox___9N3ST)}\n                >\n                  <div\n                    className={classNames(\n                      projectcss.all,\n                      projectcss.__wab_text,\n                      sty.text__ttB6N\n                    )}\n                  >\n                    {\"© Hecto . All rights reserved\"}\n                  </div>\n\n                  <p.PlasmicLink\n                    data-plasmic-name={\"link\"}\n                    data-plasmic-override={overrides.link}\n                    className={classNames(\n                      projectcss.all,\n                      projectcss.a,\n                      sty.link\n                    )}\n                    component={Link}\n                    platform={\"gatsby\"}\n                  >\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__eU62L\n                      )}\n                    >\n                      {\"Privacy\"}\n                    </div>\n\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__anPlR\n                      )}\n                    >\n                      {\"Terms and Conditions\"}\n                    </div>\n\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__xGyTo\n                      )}\n                    >\n                      {\"Contact Us\"}\n                    </div>\n\n                    <div\n                      className={classNames(\n                        projectcss.all,\n                        projectcss.__wab_text,\n                        sty.text__oGOdd\n                      )}\n                    >\n                      {\"Blog\"}\n                    </div>\n\n                    <div\n                      className={classNames(projectcss.all, sty.freeBox__pQpcn)}\n                    />\n                  </p.PlasmicLink>\n                </div>\n              </div>\n            </div>\n          </p.Stack>\n        ) : null}\n      </div>\n    </React.Fragment>\n  )\n}\n\nconst PlasmicDescendants = {\n  root: [\n    \"root\",\n    \"columns\",\n    \"column\",\n    \"h2\",\n    \"button\",\n    \"svg\",\n    \"footerBottom\",\n    \"link\",\n  ],\n\n  columns: [\"columns\", \"column\", \"h2\", \"button\", \"svg\"],\n  column: [\"column\", \"h2\", \"button\", \"svg\"],\n  h2: [\"h2\"],\n  button: [\"button\", \"svg\"],\n  svg: [\"svg\"],\n  footerBottom: [\"footerBottom\", \"link\"],\n  link: [\"link\"],\n}\n\nfunction makeNodeComponent(nodeName) {\n  const func = function (props) {\n    const { variants, args, overrides } = React.useMemo(\n      () =>\n        deriveRenderOpts(props, {\n          name: nodeName,\n          descendantNames: [...PlasmicDescendants[nodeName]],\n          internalArgPropNames: PlasmicArticle__ArgProps,\n          internalVariantPropNames: PlasmicArticle__VariantProps,\n        }),\n\n      [props, nodeName]\n    )\n\n    return PlasmicArticle__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicArticle\"\n  } else {\n    func.displayName = `PlasmicArticle.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicArticle = Object.assign(\n  // Top-level PlasmicArticle renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    columns: makeNodeComponent(\"columns\"),\n    column: makeNodeComponent(\"column\"),\n    h2: makeNodeComponent(\"h2\"),\n    button: makeNodeComponent(\"button\"),\n    svg: makeNodeComponent(\"svg\"),\n    footerBottom: makeNodeComponent(\"footerBottom\"),\n    link: makeNodeComponent(\"link\"),\n    // Metadata about props expected for PlasmicArticle\n    internalVariantProps: PlasmicArticle__VariantProps,\n    internalArgProps: PlasmicArticle__ArgProps,\n    // Page metadata\n    pageMetadata: {\n      title: \"Hecto Blog\",\n      description: \"\",\n      ogImageSrc: \"\",\n      canonical: \"\",\n    },\n  }\n)\n\nexport default PlasmicArticle\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport var button = \"PlasmicArticle-module--button--tjlE5\";\nexport var column = \"PlasmicArticle-module--column--1kxp-\";\nexport var columns = \"PlasmicArticle-module--columns--G-AmB\";\nexport var footerBottom = \"PlasmicArticle-module--footerBottom--HbfUs\";\nexport var freeBox___20TbT = \"PlasmicArticle-module--freeBox___20TbT--HWdz8\";\nexport var freeBox___9N3ST = \"PlasmicArticle-module--freeBox___9N3ST--NK4JF\";\nexport var freeBox__hx6Db = \"PlasmicArticle-module--freeBox__hx6Db--EhunR\";\nexport var freeBox__pQpcn = \"PlasmicArticle-module--freeBox__pQpcn--JkgCs\";\nexport var freeBox__vBjlN = \"PlasmicArticle-module--freeBox__vBjlN---niYG\";\nexport var freeBox__ylbjs = \"PlasmicArticle-module--freeBox__ylbjs--MZGIa\";\nexport var h2 = \"PlasmicArticle-module--h2--hLRTH\";\nexport var link = \"PlasmicArticle-module--link--L8CNx\";\nexport var root = \"PlasmicArticle-module--root--hsb7S\";\nexport var svg = \"PlasmicArticle-module--svg--HS4Ox\";\nexport var text___7Fvv = \"PlasmicArticle-module--text___7Fvv--RnklO\";\nexport var text__anPlR = \"PlasmicArticle-module--text__anPlR--Hax6U\";\nexport var text__eU62L = \"PlasmicArticle-module--text__eU62L--b3Lq5\";\nexport var text__mIivc = \"PlasmicArticle-module--text__mIivc--BIX2z\";\nexport var text__oGOdd = \"PlasmicArticle-module--text__oGOdd--Tezuj\";\nexport var text__ttB6N = \"PlasmicArticle-module--text__ttB6N--kAT-S\";\nexport var text__xGyTo = \"PlasmicArticle-module--text__xGyTo--t7r4G\";","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport * as ph from \"@plasmicapp/host\"\nimport GlobalContextsProvider from \"../../components/plasmic/hecto/PlasmicGlobalContextsProvider\"\nimport {\n  PlasmicArticle,\n  Head,\n} from \"../../components/plasmic/hecto/PlasmicArticle\"\n\nexport { Head }\n\nfunction Article({ location, params }) {\n  // Use PlasmicArticle to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicArticle are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicArticle is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return (\n    <GlobalContextsProvider>\n      <ph.PageParamsProvider\n        params={params}\n        query={Object.fromEntries(new URLSearchParams(location.search))}\n      >\n        <PlasmicArticle />\n      </ph.PageParamsProvider>\n    </GlobalContextsProvider>\n  )\n}\n\nexport default Article\n"],"names":["props","className","style","title","restProps","xmlns","classNames","viewBox","height","width","fill","d","PlasmicArticle__VariantProps","Array","PlasmicArticle__ArgProps","globalThis","__PlasmicWrapUserFunction","__PlasmicWrapUserPromise","Head","name","content","key","PlasmicArticle","pageMetadata","property","PlasmicDescendants","root","columns","column","h2","button","svg","footerBottom","link","makeNodeComponent","nodeName","func","React","deriveRenderOpts","descendantNames","internalArgPropNames","internalVariantPropNames","variants","overrides","forNode","args","ph","Object","assign","p","projectcss","as","hasGap","color","Button","endIcon","role","showEndIcon","component","Link","platform","PlasmicArticle__RenderFunc","displayName","internalVariantProps","internalArgProps","description","ogImageSrc","canonical","location","params","query","fromEntries","URLSearchParams","search"],"sourceRoot":""}